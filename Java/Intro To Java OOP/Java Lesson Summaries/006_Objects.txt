    Question 1: What's wrong with the following program?

        public class SomethingIsWrong {
            public static void main(String[] args) {
                Rectangle myRect;
                myRect.width = 40;
                myRect.height = 50;
                System.out.println("myRect's area is " + myRect.area());
            }
        }

    Answer 1: The code never creates a Rectangle object. With this simple program, the compiler generates an error. However, in a more realistic situation, myRect might be initialized to null in one place, say in a constructor, and used later. In that case, the program will compile just fine, but will generate a NullPointerException at runtime.

    Question 2: The following code creates one array and one string object. How many references to those objects exist after the code executes? Is either object eligible for garbage collection?

        ...
        String[] students = new String[10];
        String studentName = "Peter Parker";
        students[0] = studentName;
        studentName = null;
        ...

    Answer 2: There is one reference to the students array and that array has one reference to the string Peter Parker. Neither object is eligible for garbage collection.

    Question 3: How does a program destroy an object that it creates?
    Answer 3: A program does not explicitly destroy objects. A program can set all references to an object to null so that it becomes eligible for garbage collection. But the program does not actually destroy objects. 