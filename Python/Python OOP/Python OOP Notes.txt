Three Pillars of Object Oriented Programming
--------------------------------------------

1. Encapsulation - The safe storare of data (as attributes) in an instance.
 a) Data should be accessed only through instance methods.
 b) Data should be validated as correct
 c) Data should be safe from changes by external processes
2. Inheritance - The ability of one class to inherit the attributes of another class.
 a) Class attributes are inherited
 b) Methods are inherited
 c) This means that instances of an inhereiting (child) class can access attributes of the inherited (parent) class
3. Polymorphism - the provision of a single interface to be used by many classes.
 a) The methods are often different, but conceptually similar
 b) Allows for expressiveness in design
 c) We can say that this group of related classes implement the same action
 d) Duck typing - reading an object's attributes to decide whether it is the proper type, rather than checking the type directly


Object = unit of data, having one or more attributes, of a particular class or type, with associated functionality (methods)


Unlike many programming languages that use primitives, everything in Python is an object.


IDE = Integrated Development Environment (text editor geared towards software development)


Basic OOP Terms
---------------

Class: a blueprint for an instance
Instance: a constructed object of the class
Type: indicates the class an instance belongs to
Attribute: any object value (object.attribute)
Method: a "callable attribute" (AKA function) defined in the class


6 Points to Understanding Classes
---------------------------------

1) An instance of a class knows what class it's from
2) Variables defined in the class are available to the instance
3) When calling an instance method in Python (method within the class) the instance itself is automatically passed as the first argument to the method. (Should be reffered to as SELF in the method.) Because of this, instance methods are also known as "bound methods."
4. Instances have their own data (instance attributes.) These attributes are known as its "state."
5. Variable defind in the class are class attributes
6. When we read an attribute, Python looks for it first in the instance, and then in the class. (It will go with the instance value if that's what it finds first.)



The Init Constructor
--------------------

1) __init__ is a keyword variable: it must be named init
2) It is a method automatically called when a new instance (object) is constructed
3) If it is not present, it is not called
4) The 'self' argument is the first appearance of the instance
5) __init__ offers the oppotunity to initialize attributes in the instance at the time of construction


Object.attribute Lookup Hierarchy
---------------------------------

1) The instance itself (object)
2) The instances' class
3) Any other class that the instances' class inherits


Multiple Inheritance
--------------------

Python supports "multiple inheritance" which means:

1) Any class can inherit from multiple classes
2) Python normally uses a "depth first" order when searching inheriting classes, but when two classes inherit from the same class, Python eliminates the first mention of that class from the MRO (method resolution order)


Decorators; Class and Static Methods
------------------------------------

1) A class method takes the class (not instance) as an argument and works with the class object
2) A static method requires no argument and does not work with the class or instance (but still belongs in the class code)
3) A decorator is a processor that modifies a function. @classmethod and @staticmethod modify the default binding that instance methods provide


Abstract Base Classes
---------------------

1) An abstract class is a kind of "model" for other classes to be defined. It is not designed to construct instances, but can be subclassed by regular classes.
2) Abstract classes can define an interface, or methods that must be implemented by its subclasses.


Inheritance Examples
--------------------

1) Inherit: simply use the parent class' defined method
2) Override / Overload: provide child's own version of a method
3) Extend: do work in addition to that parent's method
4) Provide: implement abstract method that parent requires


Composition vs Inheritance
--------------------------

1) Inheritance can be brittle (a change may require changes elsewhere)
2) "Decoupled" code is classes, functions, etc. that work independently
3) As long as the interface is maintained, interactions between classes will work
4) Not checking or requiring particular types is polymorphic and "Pythonic"


